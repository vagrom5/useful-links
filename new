for (int idx = 0; idx < afd->derivsmsz * 2 && freqit < freqarr + freqarr_size; ++idx, ++freqit) {
    // Добавление в очередь частот
    double *outfreq = fifopush(outfreq_que);
    if (!outfreq) {
        // Если очередь переполнена, увеличиваем её
        printf("Увеличиваем очередь outfreq_que\n");
        struct Fifo *new_que = fifoinit(outfreq_que->size * 2, sizeof(double));
        // Переносим данные...
        fifofree(outfreq_que);
        outfreq_que = new_que;
        outfreq = fifopush(outfreq_que);
    }
    *outfreq = *freqit;
    
    // Аналогично для производных
    double deriv = *freqit - freq0;
    double *deriv_ptr = fifopush(derivsm_que);
    if (!deriv_ptr) {
        printf("Увеличиваем очередь derivsm_que\n");
        struct Fifo *new_que = fifoinit(derivsm_que->size * 2, sizeof(double));
        // Переносим данные...
        fifofree(derivsm_que);
        derivsm_que = new_que;
        deriv_ptr = fifopush(derivsm_que);
    }
    *deriv_ptr = deriv;
    
    if (idx >= afd->derivsmsz) {
        fifopop(derivsm_que); // Удаляем старый элемент
    }
    freq0 = *freqit;
}